<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="$(ProjectDir)DbHelper\OutputHelper.ttinclude" #>
<#@ include file="$(ProjectDir)DbHelper\DbEntity.ttinclude"  #>

<#
var manager = Manager.Create(Host, GenerationEnvironment);
var dbHelper=DbFactory.CreatDb(Config.DbType);
var dtList= dbHelper.GetDbTables();
string dapperHelper="DapperHelper";
string returnValue="int"; 
foreach(DbTable dbTable in dtList)
{   
	var preParameter=dbHelper.PreParameter;
	string tableName=dbTable.TableName;
	var dbColList=dbHelper.GetDbColumns(tableName);
	var parList=dbColList.Where(e=>!e.IsIdentity).ToList();
	var isParList=dbColList.Where(e=>e.IsIdentity).ToList();
    var primaryKey=dbHelper.GetDbColumns(tableName).First(p=>p.IsPrimaryKey);
	manager.StartNewFile(tableName+"Data.cs");#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失
//     作者：Harbour CTS
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using <#=Config.Namespace#>.Model;

namespace <#=Config.Namespace#>.Data
{	
	public partial class <#=tableName+"Data"#>
    { 
		/// <summary>
		/// 增加一条数据
		/// </summary>
		public <#=primaryKey.CSharpType#> Add(Db_<#=tableName#> model)
		{
			StringBuilder strSql = new StringBuilder();
			strSql.Append("INSERT INTO <#=tableName#>(");			
            strSql.Append("<#= dbHelper.GetFileStr(dbColList) #>");
			strSql.Append(")  OUTPUT  INSERTED.ID VALUES (");
            strSql.Append("<#= dbHelper.GetParStr(dbColList) #>");            
            strSql.Append(") "); 

			//var newClass = new
			//{
			//<# for(int i=0;i< dbColList.Count;i++){ DbColumn c = dbColList[i];if(c.IsIdentity) continue;#>    <#=c.ColumnName#> = model.<#=c.ColumnName#><# if (i< dbColList.Count-1 ) {#>,
			//<#} else{#>   
			//};<#}#><# }#>   
			return (<#=primaryKey.CSharpType#>)<#=dapperHelper#>.ExecuteScalar(strSql.ToString(), model);            
		}
		
         /// <summary>
		/// 增加多条数据
		/// </summary>
		public bool AddBatch(List<Db_<#=tableName#>>  model)
		{
			StringBuilder strSql = new StringBuilder();
			strSql.Append("INSERT INTO <#=tableName#>(");			
            strSql.Append("<#= dbHelper.GetFileStr(dbColList) #>");
			strSql.Append(")  OUTPUT  INSERTED.ID VALUES (");
            strSql.Append("<#= dbHelper.GetParStr(dbColList) #>");            
            strSql.Append(") "); 

		
			return <#=dapperHelper#>.Excute(strSql.ToString(), model) > 0;            
		}
		
		/// <summary>
		/// 更新一条数据
		/// </summary>
		public bool Update(Db_<#=tableName#> model)
		{
			StringBuilder strSql = new StringBuilder();
			strSql.Append("UPDATE <#=tableName#> set ");<# for(int i=0;i< dbColList.Count;i++){ DbColumn c = dbColList[i]; 
             if (!c.IsIdentity) {#>        
            strSql.Append(" <#= c.ColumnName #> = <#=preParameter#><#=c.ColumnName#> <# if (i< dbColList.Count-1 ) {#>,<#}#> ");<# }#><# }#>			
			strSql.Append(" WHERE <#=primaryKey.ColumnName#>=<#=string.Join(",",isParList.Select(e=>preParameter+e.ColumnName).ToArray()) #> "); 


			return <#=dapperHelper#>.Excute(strSql.ToString(), model) > 0; 
		}

	   /// <summary>
		/// 更新多条数据
		/// </summary>
		public bool UpdateBatch(List<Db_<#=tableName#>> model)
		{
			StringBuilder strSql = new StringBuilder();
			strSql.Append("UPDATE <#=tableName#> set ");<# for(int i=0;i< dbColList.Count;i++){ DbColumn c = dbColList[i]; 
             if (!c.IsIdentity) {#>        
            strSql.Append(" <#= c.ColumnName #> = <#=preParameter#><#=c.ColumnName#> <# if (i< dbColList.Count-1 ) {#>,<#}#> ");<# }#><# }#>			
			strSql.Append(" WHERE <#=primaryKey.ColumnName#>=<#=string.Join(",",isParList.Select(e=>preParameter+e.ColumnName).ToArray()) #> "); 


			return <#=dapperHelper#>.Excute(strSql.ToString(), model) > 0; 
		}
		
		
		
		/// <summary>
		/// 删除一条数据
		/// </summary>
		public bool Delete(<#=string.Join(",",isParList.Select(e=>e.CSharpType+" "+e.ColumnName).ToArray())#>)
		{	
			StringBuilder strSql = new StringBuilder();
			strSql.Append("DELETE FROM <#=tableName#> ");
			strSql.Append(" WHERE <#=primaryKey.ColumnName#>=<#= string.Join(",",dbColList.Where(e=>e.IsIdentity).Select(e=>preParameter+e.ColumnName).ToArray())#>");
			var newClass = new
			{
			<# for(int i=0;i< isParList.Count;i++){ DbColumn c = dbColList[i];#>    <#=c.ColumnName#> = <#=c.ColumnName#><# if (i< isParList.Count-1 ) {#>,
			<#} else{#>   
			};<#}}#>   
			return <#=dapperHelper#>.Excute(strSql.ToString(), newClass) > 0; 
		}

         /// <summary>
		/// 删除多条数据
		/// </summary>
         public bool DeleteBatch(List<<#=primaryKey.CSharpType#>>  <#=primaryKey.ColumnName#>)
		{	
			StringBuilder strSql = new StringBuilder();
			strSql.Append("DELETE FROM <#=tableName#> ");
			strSql.Append(" WHERE <#=primaryKey.ColumnName#> in <#= string.Join(",",dbColList.Where(e=>e.IsIdentity).Select(e=>preParameter+e.ColumnName).ToArray())#>");
            var newClass = new
			{
			<# for(int i=0;i< isParList.Count;i++){ DbColumn c = dbColList[i];#>    <#=c.ColumnName#> = <#=c.ColumnName#><# if (i< isParList.Count-1 ) {#>,
			<#} else{#>   
			};<#}}#>   
			return <#=dapperHelper#>.Excute(strSql.ToString(), newClass) > 0; 
		}
        


        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Db_<#= tableName #> GetModel(<#=string.Join(",",isParList.Select(e=>e.CSharpType+" "+e.ColumnName).ToArray())#>)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("SELECT <#= dbHelper.GetFileStrWithPrimaryKey(dbColList) #> ");
			strSql.Append(" FROM <#=tableName#> ");
            strSql.Append(" WHERE <#=primaryKey.ColumnName#>=<#= string.Join(",",dbColList.Where(e=>e.IsIdentity).Select(e=>preParameter+e.ColumnName).ToArray())#>");
			var newClass = new
			{
			<# for(int i=0;i< isParList.Count;i++){ DbColumn c = dbColList[i];#>    <#=c.ColumnName#> = <#=c.ColumnName#><# if (i< isParList.Count-1 ) {#>,
			<#} else{#>   
			};<#}}#>   
			return <#=dapperHelper#>.FirstOrDefault<Db_<#=tableName#>>(strSql.ToString(), newClass);
        }


		/// <summary>
        /// 获得数据列表
        /// </summary>
        public List<Db_<#= tableName #>> GetModelList(string strWhere, object param = null)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("SELECT <#= dbHelper.GetFileStrWithPrimaryKey(dbColList) #> ");
			strSql.Append(" FROM <#=tableName#> ");
			if (strWhere.Trim() != "")
			{
			    strSql.Append(" WHERE " + strWhere);
			}   
			return <#=dapperHelper#>.Query<Db_<#=tableName#>>(strSql.ToString(), param);
        }


		/// <summary>
		/// 获取总条数
		/// </summary>
		/// <param name="strWhere"></param>
		/// <returns></returns>
		public int GetDataRecord(string strWhere, object param = null)
		{
		    string sql = "SELECT COUNT(1) FROM <#=tableName#> WHERE  " + strWhere;
		    object obj = <#=dapperHelper#>.ExecuteScalar(sql, param );
		    if (obj == null)
		    {
		        return 0;
		    }
		    return Convert.ToInt32(obj);
		}

		/// <summary>
		/// 分页获取数据列表
		/// </summary>
		public IEnumerable<Db_<#=tableName#>> SelectListByPage(string strWhere, string orderby, int pageIndex, int pageSize,object param = null)
		{
		    StringBuilder strSql = new StringBuilder();
		    strSql.Append("SELECT * FROM ( ");
		    strSql.Append(" SELECT ROW_NUMBER() OVER (");
		    if (!string.IsNullOrEmpty(orderby.Trim()))
		    {
		        strSql.Append("ORDER BY T." + orderby);
		    }
		    else
		    {
		        strSql.Append("ORDER BY T.id desc");
		    }
		    strSql.Append(")AS Row, T.* from <#=tableName#> T ");
		    if (!string.IsNullOrEmpty(strWhere.Trim()))
		    {
		        strSql.Append(" WHERE   " + strWhere);
		    }
		    strSql.Append(" ) TT");
		    strSql.AppendFormat(" WHERE TT.Row between {0} and {1}", (pageIndex-1)*pageSize+1,pageIndex * pageSize);

		    return <#=dapperHelper#>.Query<Db_<#=tableName#>>(strSql.ToString(), param);
		}
    }
}
<#

manager.EndBlock();   
} 
manager.Process(true);  
#>


