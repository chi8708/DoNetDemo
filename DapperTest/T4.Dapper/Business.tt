<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="$(ProjectDir)DbHelper\OutputHelper.ttinclude" #>
<#@ include file="$(ProjectDir)DbHelper\DbEntity.ttinclude"  #>

<#
var manager = Manager.Create(Host, GenerationEnvironment);
var dbHelper=DbFactory.CreatDb(Config.DbType);
var dtList= dbHelper.GetDbTables();
foreach(DbTable dbTable in dtList)
{   
	string tableName=dbTable.TableName;
    var primaryKey=dbHelper.GetDbColumns(tableName).First(p=>p.IsPrimaryKey);
	manager.StartNewFile(tableName+"Service.cs");#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失
//     作者：Harbour CTS
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using <#=Config.Namespace#>.Model;
using <#=Config.Namespace#>.Data;

namespace <#=Config.Namespace#>.Service
{	
	public partial class <#=tableName#>Service
    {

        <#=tableName#>Data dal = new <#=tableName#>Data();

		/// <summary>
        /// 添加一条数据
        /// </summary>
        public <#=primaryKey.CSharpType#> Add(Db_<#=tableName#> model)
        {
           return dal.Add(model);
        }

        /// <summary>
		/// 增加多条数据
		/// </summary>
		public bool AddBatch(List<Db_<#=tableName#>>  model)
		{
			return dal.AddBatch(model) ;            
		}

		/// <summary>
        /// 更新一条数据
        /// </summary>
        public bool Update(Db_<#=tableName#> model)
        {
            return dal.Update(model);
        }
		

		/// <summary>
        /// 更新多条数据
        /// </summary>
        public bool UpdateBatch(List<Db_<#=tableName#>> model)
        {
            return dal.UpdateBatch(model);
        }
		
		/// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete(<#=primaryKey.CSharpType#>  <#=primaryKey.ColumnName#>)
        {
            return dal.Delete(<#=primaryKey.ColumnName#>);
        }

        /// <summary>
        /// 删除多条数据
        /// </summary>
        public bool DeleteBatch(List<<#=primaryKey.CSharpType#>>  <#=primaryKey.ColumnName#>)
        {
            return dal.DeleteBatch(<#=primaryKey.ColumnName#>);
        }

		/// <summary>
        /// 查询一个实体
        /// </summary>
        public Db_<#=tableName#> GetModel(<#=primaryKey.CSharpType#>  <#=primaryKey.ColumnName#>)
        {
            return dal.GetModel(<#=primaryKey.ColumnName#>);
        }
		
		/// <summary>
        /// 根据条件查询所有实体
        /// </summary>
        public List<Db_<#=tableName#>> GetModelList(string strWhere, object param = null)
        {
            return dal.GetModelList(strWhere,param);
        }

		/// <summary>
		/// 获取总条数
		/// </summary>
		/// <param name="strWhere"></param>
		/// <returns></returns>
		public int GetDataRecord(string strWhere, object param = null)
		{
			return dal.GetDataRecord(strWhere, param);
		}

		/// <summary>
		/// 分页获取数据列表
		/// </summary>
		public IEnumerable<Db_<#=tableName#>> SelectListByPage(string strWhere, string orderby, int pageIndex, int pageSize,object param = null)
		{
			return dal.SelectListByPage(strWhere, orderby, pageIndex, pageSize, param);
		}
    }
}

<#

manager.EndBlock();   
} 
manager.Process(true);  
#>




