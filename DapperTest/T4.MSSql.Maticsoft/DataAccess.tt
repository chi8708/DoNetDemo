<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="$(ProjectDir)DbHelper\OutputHelper.ttinclude" #>
<#@ include file="$(ProjectDir)DbHelper\DbEntity.ttinclude"  #>
<#
var manager = Manager.Create(Host, GenerationEnvironment);
var dbHelper=DbFactory.CreatDb(Config.DbType);
var dtList= dbHelper.GetDbTables();
string dbHelperSql="DbHelperSQL";
string returnValue="int"; 
foreach(DbTable dbTable in dtList)
{   
	string tableName=dbTable.TableName;
	var dbColList=dbHelper.GetDbColumns(tableName);
	var parList=dbColList.Where(e=>!e.IsIdentity).ToList();
	var identityKey=dbTable.HasPrimaryKey;
	var preParameter=dbHelper.PreParameter;
	var where="ID="+preParameter+"ID";
	manager.StartNewFile(tableName+"Data.cs");#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失
//     作者：Harbour
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using <#=Config.Namespace#>.Model;

namespace <#=Config.Namespace#>.Data
{	
	public partial class <#=tableName+"Data"#>
    { 
		/// <summary>
		/// 增加一条数据
		/// </summary>
		public int Add(Db_<#=tableName#> model)
		{
			StringBuilder strSql = new StringBuilder();
			strSql.Append("insert into <#=tableName#>(");			
            strSql.Append("<#= dbHelper.GetFileStr(dbColList) #>");
			strSql.Append(") values (");
            strSql.Append("<#= dbHelper.GetParStr(dbColList) #>");            
            strSql.Append(") ");          
            <#if (identityKey) {#>strSql.Append(";select @@IDENTITY");<#}#>		
			SqlParameter[] parameters = {  
			<# for(int i=0;i< dbColList.Count;i++)
            {   
            DbColumn c = dbColList[i];
            if(c.IsIdentity) continue;
            #>
            new SqlParameter("<#=preParameter#><#=c.ColumnName#>" ,model.<#=c.ColumnName#>)<# if (i< dbColList.Count-1 ) {#>,
			<#} else{#>};<#}#><# }#>
            <#if (identityKey) {#>   
			object obj = <#=dbHelperSql#>.GetSingle(strSql.ToString(), parameters);			
			if (obj == null)
			{
				return 0;
			}
			else
			{
				<# if ( returnValue=="int" ) 
				{#>return Convert.ToInt32(obj);<#}#>
                <# if ( returnValue=="long" ) 
				{#>return Convert.ToInt64(obj);<#}#>
                <# if ( returnValue=="decimal" ) 
				{#>return Convert.ToDecimal(obj);<#}#>                  
			}<#} else {#>   
            DbHelperSQL.ExecuteSql(strSql.ToString(), parameters);<#}#>   
		}
		
		
		/// <summary>
		/// 更新一条数据
		/// </summary>
		public bool Update(Db_<#=tableName#> model)
		{
			StringBuilder strSql = new StringBuilder();
			strSql.Append("update <#=tableName#> set ");<# for(int i=0;i< dbColList.Count;i++){ DbColumn c = dbColList[i]; 
             if (!c.IsIdentity) {#>        
            strSql.Append(" <#= c.ColumnName #> = <#=preParameter#><#=c.ColumnName#> <# if (i< dbColList.Count-1 ) {#>,<#}#> ");<# }#><# }#>			
			strSql.Append(" where <#=where #> ");
			SqlParameter[] parameters = {
			<# for(int i=0;i< dbColList.Count;i++)
            {   DbColumn c = dbColList[i]; #>
            new SqlParameter("<#=preParameter#><#=c.ColumnName#>" , model.<#=c.ColumnName#>)<# if (i< dbColList.Count-1 ) {#>,
            <#} else{#>};<#}#><# }#>
			       
            int rows = <#=dbHelperSql#>.ExecuteSql(strSql.ToString(), parameters);
			if (rows > 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		/// <summary>
		/// 删除一条数据
		/// </summary>
		public bool Delete(int ID)
		{	
			StringBuilder strSql = new StringBuilder();
			strSql.Append("delete from <#=tableName#> ");
			strSql.Append(" where <#= where#>");
			SqlParameter[] parameters = {
					new SqlParameter("<#= preParameter #>ID", id)};
			int rows = <#=dbHelperSql#>.ExecuteSql(strSql.ToString(), parameters);
			if (rows > 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		}


        /// <summary>
		/// 批量删除一批数据
		/// </summary>
		public bool DeleteList(string idlist)
		{
            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from <#=tableName#> ");
            strSql.Append(" where ID in (" + idlist + ")  ");
			int rows = <#=dbHelperSql#>.ExecuteSql(strSql.ToString());
			if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Db_<#= tableName #> GetModel(int ID)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select <#= dbHelper.GetFileStr(dbColList) #> ");
            strSql.Append(" where <#= where#>");
			SqlParameter[] parameters = {
					new SqlParameter("<#= preParameter #>ID" ,ID)};

            DataSet ds = <#=dbHelperSql#>.Query(strSql.ToString(), parameters);
            if (ds.Tables[0].Rows.Count > 0)
            {
                return DataRowToModel(ds.Tables[0].Rows[0]);
            }
            else
            {
                return null;
            }
        }


		/// <summary>
        /// 获得数据列表
        /// </summary>
        public List<Db_<#= tableName #>> GetModelList(string strWhere)
        {
            DataSet ds = GetList(strWhere);
            return DataTableToList(ds.Tables[0]);
        }
        /// <summary>
        /// 获得数据列表
        /// </summary>
        public List<Db_<#= tableName #>> DataTableToList(DataTable dt)
        {
            List<Db_<#= tableName #>> modelList = new List<Db_<#= tableName #>>();
            int rowsCount = dt.Rows.Count;
            if (rowsCount > 0)
            {
                Db_<#= tableName #> model;
                for (int n = 0; n < rowsCount; n++)
                {
                    model = DataRowToModel(dt.Rows[n]);
                    if (model != null)
                    {
                        modelList.Add(model);
                    }
                }
            }
            return modelList;
        }
		
		
		/// <summary>
		/// 得到一个对象实体
		/// </summary>
		public Db_<#= tableName #> DataRowToModel(DataRow row)
		{
			Db_<#= tableName #> model = new Db_<#= tableName #>();
			
			if (row != null)
			{<# foreach (DbColumn c in dbColList) {if(c.CSharpType=="int"||c.CSharpType=="long"||c.CSharpType=="float"||c.CSharpType=="DateTime"||c.CSharpType=="decimal"){#>	
				if (row["<#=c.ColumnName#>"].ToString() != "")
				{
					model.<#=c.ColumnName#> = <#=c.CSharpType#>.Parse(row["<#=c.ColumnName#>"].ToString());
				}
<# } if(c.CSharpType=="string") {#>
				model.<#=c.ColumnName#> = row["<#=c.ColumnName#>"].ToString();
<# }if(c.CSharpType=="byte[]") {#>   
				if (row["<#= c.ColumnName#>"].ToString() != "")
				{
					model.<#=c.ColumnName#> = (byte[])row["<#=c.ColumnName#>"];
				}<# } if(c.CSharpType=="Guid") {#>
				if ( row["<#=c.ColumnName#>"].ToString() != "")
				{
					model.<#=c.ColumnName#> = row["<#=c.ColumnName#>"].ToString();
				}<# } if(c.CSharpType=="bool") {#>
				if (row["<#=c.ColumnName#>"].ToString() != "")
				{
					if ((row["<#=c.ColumnName#>"].ToString() == "1") || (row["<#=c.ColumnName#>"].ToString().ToLower() == "true"))
					{
						model.<#=c.ColumnName#> = true;
					}
					else
					{
						model.<#=c.ColumnName#> = false;
					}
				}
<# }} #>						
				return model;
			}
			else
			{
				return null;
			}
		}
		
		
		/// <summary>
		/// 获得数据列表
		/// </summary>
		public DataSet GetList(string strWhere)
		{
			StringBuilder strSql = new StringBuilder();
			strSql.Append("select * ");
			strSql.Append(" FROM <#=tableName#> ");
			if (strWhere.Trim() != "")
			{
				strSql.Append(" where " + strWhere);
			}
			return <#=dbHelperSql#>.Query(strSql.ToString());
		}
		
		/// <summary>
		/// 获得前几行数据
		/// </summary>
		public DataSet GetList(int Top, string strWhere, string filedOrder)
		{
			StringBuilder strSql = new StringBuilder();
			strSql.Append("select ");
			if (Top > 0)
			{
				strSql.Append(" top " + Top.ToString());
			}
			strSql.Append(" * ");
			strSql.Append(" FROM <#=tableName#> ");
			if (strWhere.Trim() != "")
			{
				strSql.Append(" where " + strWhere);
			}
			strSql.Append(" order by " + filedOrder);
			return <#=dbHelperSql#>.Query(strSql.ToString());
		}
    }
}
<#

manager.EndBlock();   
} 
manager.Process(true);  
#>


